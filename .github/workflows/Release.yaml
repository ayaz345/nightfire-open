name: "Release"

on:
  push:
    tags:
      - "v*"

# For some reason, the builds like to be nested in extra nightfire-open
# directories, and I can't find a way to stop that from happening. Whatever.

jobs:
  check-release-notes:
    name: Check release notes are present
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # Check that there are release notes present for this tag.
    # If not, this should fail the step.
    - shell: bash
      run: stat ${{runner.workspace}}/nightfire-open/releases/${{github.ref_name}}/ReleaseNotes.md

  archive-content:
    name: Archive content
    runs-on: ubuntu-22.04
    needs: check-release-notes

    steps:
    #######################################
    # TODO: Re-enable this
    #######################################

    # # LFS is only enabled in this step, because it's expensive.
    # # We create an archive of the content from here and
    # # upload it, so that we can download it later and
    # # sidestep GitHub's LFS bandwidth tracking.
    # - uses: actions/checkout@v3
    #   with:
    #     submodules: recursive
    #     lfs: true

    # - name: Checkout LFS objects
    #     run: git lfs checkout

    # - name: Install dependencies
    #   run: sudo apt update && sudo apt install -y libsdl2-dev

    # # We run the install process because things may not be
    # # as simple as just copying and pasting the content folder
    # # into the install prefix. There could be files that are
    # # generated as part of this process in future.
    # - name: Collect content
    #   uses: ashutoshvarma/action-cmake-build@master
    #   with:
    #     build-dir: ${{runner.workspace}}/build
    #     cc: gcc
    #     cxx: g++
    #     build-type: MinSizeRel
    #     target: install
    #     configure-options: -DCMAKE_INSTALL_PREFIX=install -DNF_INSTALL_CONTENT_ONLY=YES

    #######################################
    # For the dry run, we do this instead:
    #######################################

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - shell: bash
      run: |
        mkdir -p ${{runner.workspace}}/nightfire-open/install/nightfire-open
        echo "Testing" > ${{runner.workspace}}/nightfire-open/install/nightfire-open/this-should-be-alongside-the-bond-executable.txt

    #######################################
    # End
    #######################################

    - shell: bash
      run: |
        cd ${{runner.workspace}}
        tar -czvf nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/nightfire-open/install/ .

    - name: Upload content
      uses: actions/upload-artifact@v3
      with:
        name: lfscontent
        path: ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz

  build-linux:
    name: Build on Ubuntu
    runs-on: ubuntu-22.04
    needs: archive-content

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y libsdl2-dev

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: gcc
        cxx: g++
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install

    - shell: bash
      run: |
        cd ${{runner.workspace}}
        tar -czvf nightfire-open_${{github.ref_name}}_linux.tar.gz -C ${{runner.workspace}}/nightfire-open/install/ .

    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: artefacts_linux
        path: ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_linux.tar.gz

  build-windows:
    name: Build on Windows
    runs-on: windows-2022
    needs: archive-content

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build
      uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{runner.workspace}}/build
        cc: cl
        cxx: cl
        build-type: MinSizeRel
        target: install
        configure-options: -DCMAKE_INSTALL_PREFIX=install

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: tar
        filename: nightfire-open_${{github.ref_name}}_windows.tar.gz
        directory: ${{runner.workspace}}/nightfire-open
        path: install

    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: artefacts_windows
        path: ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_windows.tar.gz

  create-release:
    name: Create release
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download Linux artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts_linux

      - name: Download Windows artefacts
        uses: actions/download-artifact@v3
        with:
          name: artefacts_windows

      - name: Download LFS content
        uses: actions/download-artifact@v3
        with:
          name: lfscontent

      # We do this little dance to use the LFS content for both builds, which at the moment are both .tar.gz files.
      # We will then re-archive them later.
      # Windows paths are different because the zip process from the Windows step sucks, and can't produce
      # the file structure that we want within the archive.
      - shell: bash
        run: |
          cd ${{runner.workspace}}
          mkdir -p ${{runner.workspace}}/staging/linux
          mkdir -p ${{runner.workspace}}/staging/windows

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_linux.tar.gz -C ${{runner.workspace}}/staging/linux
          tar -xzf --overwrite ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/linux
          ls ${{runner.workspace}}/staging/linux

          tar -xzf ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_windows.tar.gz -C ${{runner.workspace}}/staging/windows
          tar -xzf --overwrite ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz -C ${{runner.workspace}}/staging/windows
          ls ${{runner.workspace}}/staging/windows

          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_linux.tar.gz
          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_windows.tar.gz
          rm ${{runner.workspace}}/nightfire-open/nightfire-open_${{github.ref_name}}_lfscontent.tar.gz

      - name: Archive Windows Release
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          filename: nightfire-open_${{github.ref_name}}_windows.zip
          directory: ${{runner.workspace}}/staging/windows

      - shell: bash
        run: |
          cd ${{runner.workspace}}
          tar -czvf nightfire-open_${{github.ref_name}}_linux.tar.gz -C ${{runner.workspace}}/staging/linux .

      - name: Create release
        uses: 'softprops/action-gh-release@v1'
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          name: Release ${{github.ref_name}}
          body_path: ${{runner.workspace}}/nightfire-open/releases/${{github.ref_name}}/ReleaseNotes.md
          generate_release_notes: true
          files:  |
            ${{runner.workspace}}/nightfire-open_${{github.ref_name}}_linux.tar.gz
            ${{runner.workspace}}/staging/windows/nightfire-open_${{github.ref_name}}_windows.zip
